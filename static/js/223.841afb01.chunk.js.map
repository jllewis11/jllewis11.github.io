{"version":3,"file":"static/js/223.841afb01.chunk.js","mappings":"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","sources":["components/panda_model/PandaViewer.jsx"],"sourcesContent":["import { useState, useEffect, useRef } from 'react'\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls'\nimport * as THREE from 'three'\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader'\n\nfunction loadGLTFModel(scene, glbPath, options) {\n  const { receiveShadow, castShadow } = options\n  return new Promise((resolve, reject) => {\n    const loader = new GLTFLoader()\n    loader.load(\n      glbPath,\n      gltf => {\n        const obj = gltf.scene\n        obj.name = 'Panda'\n        obj.position.y = 0\n        obj.position.x = 0\n        obj.receiveShadow = receiveShadow\n        obj.castShadow = castShadow\n        scene.add(obj)\n\n        obj.traverse(function (child) {\n          if (child.isMesh) {\n            child.castShadow = castShadow\n            child.receiveShadow = receiveShadow\n          }\n        })\n\n        resolve(obj)\n      },\n      undefined,\n      function (error) {\n        console.log(error)\n        reject(error)\n      }\n    )\n  })\n}\n\nfunction easeOutCirc(x) {\n  return Math.sqrt(1 - Math.pow(x - 1, 4))\n}\n\nconst Panda = () => {\n  const refContainer = useRef()\n  const [loading, setLoading] = useState(true)\n  const [renderer, setRenderer] = useState()\n\n  useEffect(() => {\n    const { current: container } = refContainer\n    if (container && !renderer) {\n      const scW = container.clientWidth\n      const scH = container.clientHeight\n      const renderer = new THREE.WebGLRenderer({\n        antialias: true,\n        alpha: true\n      })\n      renderer.setPixelRatio(window.devicePixelRatio)\n      renderer.setSize(scW, scH)\n      renderer.outputEncoding = THREE.sRGBEncoding\n      container.appendChild(renderer.domElement)\n      setRenderer(renderer)\n\n      const scene = new THREE.Scene()\n      const scale = 20\n      const camera = new THREE.OrthographicCamera(\n        -scale,\n        scale,\n        scale,\n        -scale,\n        0.01,\n        50000\n      )\n      const target = new THREE.Vector3(-0.5, 1.2, 0)\n      const initialCameraPosition = new THREE.Vector3(\n        -2000 * Math.sin(0.2 * Math.PI),\n        100,\n        -2000 * Math.cos(0.2 * Math.PI)\n      )\n      const ambientLight = new THREE.AmbientLight(0xcccccc, 1)\n      scene.add(ambientLight)\n      const controls = new OrbitControls(camera, renderer.domElement)\n      controls.autoRotate = true\n      controls.target = target\n\n      loadGLTFModel(scene, 'http://127.0.0.1:5500/public/Panda.glb', {\n        receiveShadow: false,\n        castShadow: false\n      }).then(() => {\n        animate()\n        setLoading(false)\n      })\n\n      let req = null\n      let frame = 0\n      const animate = () => {\n        req = requestAnimationFrame(animate)\n        frame = frame <= 100 ? frame + 1 : frame\n\n        if (frame <= 100) {\n          const p = initialCameraPosition\n          const rotSpeed = -easeOutCirc(frame / 120) * Math.PI * 20\n\n          camera.position.y = 10\n          camera.position.x =\n            p.x * Math.cos(rotSpeed) + p.z * Math.sin(rotSpeed)\n          camera.position.z =\n            p.z * Math.cos(rotSpeed) - p.x * Math.sin(rotSpeed)\n          camera.lookAt(target)\n        } else {\n          controls.update()\n        }\n\n        renderer.render(scene, camera)\n      }\n\n      return () => {\n        cancelAnimationFrame(req)\n        renderer.dispose()\n      }\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [])\n\n  return (\n    <div\n      style={{ height: '540px', width: '540px', position: 'relative' }}\n      ref={refContainer}\n    >\n      {loading && (\n        <span style={{ position: 'absolute', left: '50%', top: '50%' }}>\n          Loading...\n        </span>\n      )}\n    </div>\n  )\n}\n\nexport default Panda\n"],"names":["refContainer","useRef","useState","loading","setLoading","renderer","setRenderer","useEffect","container","current","scW","clientWidth","scH","clientHeight","THREE","antialias","alpha","setPixelRatio","window","devicePixelRatio","setSize","outputEncoding","appendChild","domElement","scene","camera","target","initialCameraPosition","Math","sin","PI","cos","ambientLight","add","controls","OrbitControls","autoRotate","glbPath","options","receiveShadow","castShadow","Promise","resolve","reject","GLTFLoader","load","gltf","obj","name","position","y","x","traverse","child","isMesh","undefined","error","console","log","loadGLTFModel","then","animate","req","frame","requestAnimationFrame","p","rotSpeed","sqrt","pow","z","lookAt","update","render","cancelAnimationFrame","dispose","style","height","width","ref","left","top"],"sourceRoot":""}